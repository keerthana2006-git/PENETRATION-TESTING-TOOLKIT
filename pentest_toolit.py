import socket
import requests

# -----------------------------
# Port Scanner
# -----------------------------
def scan_ports(target, ports):
    print(f"[+] Scanning {target} on ports {ports}")
    open_ports = []
    for port in ports:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(0.5)
            result = s.connect_ex((target, port))
            if result == 0:
                print(f"[+] Port {port} is open")
                open_ports.append(port)
            s.close()
        except Exception as e:
            print(f"[-] Error scanning port {port}: {e}")
    return open_ports

# -----------------------------
# Banner Grabber
# -----------------------------
def grab_banner(ip, port):
    try:
        s = socket.socket()
        s.connect((ip, port))
        banner = s.recv(1024).decode().strip()
        print(f"[+] Banner: {banner}")
        return banner
    except Exception as e:
        print(f"[-] Failed to grab banner on port {port}: {e}")
        return None

# -----------------------------
# Service Detector
# -----------------------------
def detect_service(port):
    common_services = {
        21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP", 80: "HTTP",
        110: "POP3", 143: "IMAP", 443: "HTTPS", 3306: "MySQL"
    }
    return common_services.get(port, "Unknown")

# -----------------------------
# Vulnerability Checker
# -----------------------------
def check_vulnerabilities(banner):
    vulns = {
        "vsFTPd 2.3.4": "Backdoor vulnerability (CVE-2011-2523)",
        "Apache 2.4.49": "Path traversal vulnerability (CVE-2021-41773)"
    }
    for service, vuln in vulns.items():
        if service in banner:
            print(f"[!] Potential vulnerability detected: {vuln}")
            return vuln
    print("[*] No known vulnerabilities found.")
    return None

# -----------------------------
# HTTP Brute Forcer
# -----------------------------
def http_bruteforce(url, username, password_list):
    for password in password_list:
        print(f"[*] Trying password: {password}")
        try:
            response = requests.post(url, data={"username": username, "password": password}, timeout=5)
            
            
            if "Welcome, admin!" in response.text:
                print(f"[+] Password found: {password}")
                return password
        except Exception as e:
            print(f"[-] Error trying password '{password}': {e}")
    print("[-] Password not found")
    return None

    

# -----------------------------
# Main Program
# -----------------------------
if __name__ == "__main__":
    print("=== Penetration Testing Toolkit ===")
    target = input("Enter target IP address: ")
    ports = [21, 22, 23, 25, 80, 443, 3306]

    # Port scan
    open_ports = scan_ports(target, ports)

    # For each open port: grab banner, detect service, check vuln
    for port in open_ports:
        print(f"\n[=] Scanning service on port {port}")
        banner = grab_banner(target, port)
        service = detect_service(port)
        print(f"[+] Detected service: {service}")
        if banner:
            check_vulnerabilities(banner)

    # Optional Brute Force
    brute_choice = input("\nDo you want to run HTTP brute force? (y/n): ").lower()
    if brute_choice == 'y':
        url = input("Enter login URL (e.g., http://target/login): ")
        username = input("Enter username: ")
        # Simple default password list
        password_list = ["admin", "123456", "password", "root", "toor"]
        http_bruteforce(url, username, password_list)





#FLASK APP CODE#  (fake_login_server.py)

from flask import Flask, request, render_template_string

app = Flask(__name__)

VALID_USERNAME = "admin"
VALID_PASSWORD = "toor"

LOGIN_HTML = """
<!doctype html>
<title>Login</title>
<h2>Login Page</h2>
<form method="post">
  Username: <input name="username"><br>
  Password: <input name="password"><br>
  <input type="submit" value="Login">
</form>
{% if error %}<p style="color:red">{{ error }}</p>{% endif %}
"""

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        if request.form['username'] == VALID_USERNAME and request.form['password'] == VALID_PASSWORD:
            return "Welcome, admin!"
        else:
            error = "Invalid credentials"
    return render_template_string(LOGIN_HTML, error=error)

if __name__ == "__main__":
    app.run(debug=True, port=5000)





